import "./component/ExpenseItem";
import ExpenseItem from "./component/ExpenseItem";
import NewExpense from "./component/NewExpense";
import ExpenseFilter from "./component/ExpenseFilter";
import { useState } from "react";
import { data } from "jquery";
import ExpensesList from "./component/ExpensesList";
import ExpenseChart from "./component/ExpensesChart";

//Lifting data up(moving child data from to parent)

//Lifting state up

//controll component
// when the input or props are the intiall state or value of component
// and the output or data generated by the compnonet are also used by parent
// then it is control component (all things are handle by parent)

//stateless and statefull (dumb vs smart)(component)
//stateless it dont handle any state for eg->Expensefilter.js (dumb,presental)(component)
//statefull it handle the state

function App() {
  const [year, setYear] = useState("2020");
  const expens = [
    {
      title: "car Insurance",
      amount: 300,
      id: "e1",
      date: new Date(2020, 7, 14),
    },
    {
      title: "car",
      amount: 300,
      id: "e2",
      date: new Date(2020, 7, 14),
    },
  ];
  const [expense, setExpense] = useState(expens);
  const addExpenseHandler = (newexpense) => {
    setExpense((data) => {
      console.log(data);
      return [...data, newexpense];
    });
  };
  const changeYear = (data) => {
    setYear(data);
  };
  // console.log(year);
  const filterExpense = expense.filter((expen) => {
    // console.log(expen.date.getFullYear.toString(), year);
    return expen.date.getFullYear().toString() === year;
  });
  // console.log(filterExpense);
  //prop

  // we can also use the props in the component
  //we are alos use conditional rendering like this
  let expensesContent = <p>No expense found</p>;
  if (filterExpense.length > 0) {
    expensesContent = filterExpense.map((data) => {
      return (
        <ExpenseItem
          key={data.id}
          title={data.title}
          amount={data.amount}
          date={data.date}
        ></ExpenseItem>
      );
    });
  }
  return (
    <div>
      <NewExpense onAddExpense={addExpenseHandler} />
      <ExpenseChart expenses={filterExpense} />
      <ExpenseFilter year={year} changeYear={changeYear} />
      {
        /* {conditional rendering} */
        //use ternary operator for conditional rendering
        // we can also this by using && operator
        // {filterExpense.length===0&&<p>NO expense item</p>}
        // {filterExpense.length>0&&filterExpense.map((data) => {
        //   return (
        //     <ExpenseItem
        //       key={data.id}
        //       title={data.title}
        //       amount={data.amount}
        //       date={data.date}
        //     ></ExpenseItem>
        //   );
        // })}
      }
      {
        // we can also use ternary operator for conditional rendering
        /* {filterExpense.length === 0 ? (
        <p>No expense item</p>
      ) : (
        filterExpense.map((data) => {
          return (
            <ExpenseItem
              key={data.id}
              title={data.title}
              amount={data.amount}
              date={data.date}
            ></ExpenseItem>
          );
        })
      )} */
      }
      {/* {expensesContent} */}
      <ExpensesList data={filterExpense} />
    </div>
  );
}

export default App;
